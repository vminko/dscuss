Title:      Dscuss service architecture
Summary:    This article describes the architecture of the Dscuss service,
            which implements the Dscuss protocol.
Copyright:  (c) 2016-2017 Vitaly Minko
            Content is available under GNU Free Documentation License 1.3 and
            Creative Commons Attribution-Share Alike 3.0 Unported License
Date:       03 Jun 2017
Web:        http://vminko.org/dscuss/peer_state


Brief description of the architecture (key design decisions)
------------------------------------------------------------

* It's a __long-duration service__ - it runs for extended amount of time, time
  spent for establishing connection between peers is much smaller than the
  average lifetime of the connection. 
* It's an __internal service__ - service that receives requests is the same
  service that handles the request.
* It's a __modular service__ - decomposed into hierarchically related
  subsystems (`UI backend`, `GlobalDataStorage`, `Peer`, `Connection`).
* It's a __standing server__ - it continues to run beyond lifetime of any peer
  connection it establishes.
* It'a a __statically configured__ server - you need to restart the server
  to apply changes in the config file.
* It's a __concurrent server__ - it handles multiple peer connections
  simultaneously.


Class diagram
-------------

Class diagram of the Dscuss application is represented below. 

![class_diagram][class_dia_img]
View in [full][class_dia_img] resolution.

[The source][class_dia_src] of the scheme can be opened and edited in [Dia][dia].


[class_dia_img]: /storage/dscuss/illustrations/class_dia.png
[class_dia_src]: /storage/dscuss/illustrations/sources/class_dia.dia
[dia]: https://wiki.gnome.org/Apps/Dia/
